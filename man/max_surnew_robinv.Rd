% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/max_surnew_robinv.R
\name{max_surnew_robinv}
\alias{max_surnew_robinv}
\title{Optimization of the surnew criterion}
\usage{
max_surnew_robinv(lower, upper, optimcontrol = NULL, opt.index,
  inv.index, integration.param, T, model, new.noise.var = NULL)
}
\arguments{
\item{lower}{Array of size d. Lower bound of the input domain.}

\item{upper}{Array of size d. Upper bound of the input domain.}

\item{optimcontrol}{A list with the following fields. method : can be either
equal to \code{"discrete"} for discrete optimization or \code{"genoud"} (default)
for optimization using the \code{genoud} package.

(I) If \code{optimcontrol$method="discrete"} the user can set the field
optim.points which is a matrix with d columns containing all the points
tested to find the optimum. If not set we use 100*d random points generated
uniformly.

(II) If \code{optimcontrol$method="genoud"} the user can set the arguments of the
genoud algorithm. pop.size: population size of each generation (default: 50*d),
max.generation: maximum number of generations used to find the optimum (default: 2*d),
wait.generation: the algorithm stops if no improvement is done for wait.generation
generations (default: 1). Other parameters of the genoud algorithm can be set, namely
BFGSburnin, parinit, unif.seed, int.seed, P1, P2, ..., until P9. See the documentation
of the genoud function.}

\item{opt.index}{Array with integers corresponding to the indices of the nuisance parameters.}

\item{inv.index}{Array with integers corresponding to the indices of the controlled parameters.}

\item{integration.param}{An object obtained from a call to the
\code{integration_design_robinv}.}

\item{T}{Target threshold.}

\item{model}{The current kriging model. km object.}

\item{new.noise.var}{Noise variance of the new observations.
Leave to NULL for noiseless functions. For noisy functions, any non zero value
is valid and will give the same result.}
}
\value{
A list with the following fields.
(i) par: optimizer of the sampling criterion.
(ii) value: minimum of the sampling criterion.
(iii) allvalues: when a discrete optimization is performed, this contains all the values of the criterion for the tested points.
}
\description{
Minimizes the surnew criterion using either discrete or genetic optimization
}
\examples{
library(KrigInv)
myfun <- branin_robinv
d <- 3

set.seed(8)

n0 <- 30
T <- 10
opt.index <- c(3)
inv.index <- c(1,2)
lower <- rep(0,times=d)
upper <- rep(1,times=d)

design <- matrix(runif(d*n0),nrow=n0)
response <- myfun(design)
model <- km(formula = ~1,design = design,response = response,covtype = "matern3_2")

integcontrol <- list(distrib = "surnew",n.points = 20,finaldistrib="surnew",
                     n.candidates=50,nsimu=1000,n.optpoints = 50,
                     choose_optpoints=TRUE,n.optpoints.candidates=500)
\dontrun{
obj <- integration_design_robinv(integcontrol = integcontrol,d=d,lower=lower,upper=upper,
                                 opt.index=opt.index,inv.index=inv.index,model=model,T=T)

# one try with discrete optimization:
optimcontrol <- list(method="discrete")

result <- max_surnew_robinv(lower = lower,upper = upper,optimcontrol = optimcontrol,
                            opt.index = opt.index,inv.index = inv.index,
                            integration.param = obj,T = T,model = model)

result$par
result$value

# one try with genoud optimization:
optimcontrol <- list(method="pso",pop.size = 200,max.generations=3)

result2 <- max_surnew_robinv(lower = lower,upper = upper,optimcontrol = optimcontrol,
                             opt.index = opt.index,inv.index = inv.index,
                             integration.param = obj,T = T,model = model)

result2$par
result2$value
}
}
\author{
Clement Chevalier \email{clement.chevalier@unine.ch}
}
