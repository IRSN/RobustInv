% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_suroptinv}
\alias{fast_suroptinv}
\title{Fast C++ computation of the surnew criterion}
\usage{
fast_suroptinv(N, p, nsimu, allsimu, allsimu_centered, kn, allKninv, lambda, mn,
  sn, T, randmatrix)
}
\arguments{
\item{N}{Number of integration points.}

\item{p}{Number of simulation points.}

\item{nsimu}{Number of conditional simulations per integration points.}

\item{allsimu}{p x (nsimu*N) matrix where p is the number of simulation points.}

\item{allsimu_centered}{p x (nsimu*N) matrix containing the later simulations centered by
substracting the kriging mean of the points where the simulations are performed.}

\item{kn}{p x N matrix containing the kriging covariances between the candidate
point x and all the p*N simulation points.}

\item{allKninv}{(N*p) x p matrix containing N different p x p matrices. Matrix number i is the inverse
of the p x p non-conditional covariance matrix of the p simulation points associated to the
integration point i.}

\item{lambda}{p x N matrix of kriging weights of the candidate point x for the prediction in the simulation points.}

\item{mn}{Kriging mean in the candidate point x}

\item{sn}{Kriging standard deviation in the candidate point x}

\item{T}{Target threshold.}

\item{randmatrix}{N x nsimu matrix containing independent realizations of a standard gaussian random variable.}
}
\value{
A column vector of size N containing the expectation of pn+1 (1 - pn+1) for
all the N integration points. The surnew criterion is simply the average (or weighted average - using the integration weights)
of this array.
}
\description{
Computes the expectation of pn+1 (1 - pn+1) for all integration points
using an update formula on Gaussian process conditional realizations. This is a
crucial step for computing the surnew criterion.
}
\examples{
library(KrigInv)
myfun <- branin_robinv
d <- 3

set.seed(8)

n0 <- 30
T <- 10
opt.index <- c(3)
inv.index <- c(1,2)
lower <- rep(0,times=d)
upper <- rep(1,times=d)

design <- matrix(runif(d*n0),nrow=n0)
response <- myfun(design)
model <- km(formula = ~1,design = design,response = response,covtype = "matern3_2")

n <- 20 ;p <- 50; nsimu <- 1000

integcontrol <- list(distrib = "surnew",n.points = n,finaldistrib="surnew",
                     n.candidates=50,nsimu=nsimu,n.optpoints = p,
                     choose_optpoints=TRUE,n.optpoints.candidates=500)
\dontrun{
obj <- integration_design_robinv(integcontrol = integcontrol,d=d,lower=lower,upper=upper,
                                 opt.index=opt.index,inv.index=inv.index,model=model,T=T)

randmatrix <- matrix(rnorm(nsimu*n),nrow=n)
current.sur <- sum(obj$integration.weights*obj$pn*(1-obj$pn))

x <- c(0.841295 , 0.0757517 , 0.7507468)

N <- n
n <- model@n
xnew <- matrix(x,nrow=1)
pred <- predict_nobias_km(object=model,newdata=xnew,type="UK",checkNames=FALSE)
mn <- pred$mean ; sn <- pred$sd ; F.newdata <- pred$F.newdata ; c.newdata <- pred$c

kn_xnplus1_simupoints <- computeQuickKrigcov(model=model,integration.points=obj$allsimupoints,
                                             X.new=xnew,precalc.data=obj$allprecomp ,F.newdata=F.newdata ,c.newdata=c.newdata )
kn_xnplus1_simupoints <- matrix(kn_xnplus1_simupoints,nrow=p,ncol=N)
lambda <- kn_xnplus1_simupoints/sn^2

result  <- fast_suroptinv(N=N,p=p,nsimu=nsimu,allsimu=obj$allsimu,
                          allsimu_centered=obj$allsimucentered,
                          kn=kn_xnplus1_simupoints,allKninv=obj$allKn.inv,
                          lambda=lambda,mn=mn,sn=sn,T=T,
                          randmatrix=randmatrix)

result
sum(result*obj$integration.weights) # value of the surnew criterion at point x
}
}
\author{
Clement Chevalier \email{clement.chevalier@unine.ch}
}

